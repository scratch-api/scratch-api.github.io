{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"README","text":""},{"location":"#readme","title":"README","text":"<p>This project aims to document the Scratch API and other features, such as the sb3 file format. The source of these docs is available on GitHub.</p> <p>You can make contributions by opening a pull request on GitHub or using the 'edit this page' button towards the top right</p> <p>The docs are licensed under MIT</p> <p>Note</p> <p>This website contains a fork of the scratchattach wiki, which is licensed under MIT as well, in the SA-Wiki section.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Thanks for considering to contribute to the ScratchAPIs project!</p>"},{"location":"contributing/#ways-you-can-contribute","title":"Ways you can contribute","text":"<ul> <li>Open a pull request to add some code</li> <li>Open a pull request here to add docs or use the 'edit this page' button towards the top right of this page.</li> <li>If you have an existing ScratchAPI/interaction project, consider adding it to the GitHub org</li> </ul> <p>Warning</p> <p>If you are contributing to https://github.com/scratch-api/scratch-api.github.io, note that the <code>gh-pages</code> branch is overwritten and force-pushed on every single commit to the <code>main</code> branch. So do not edit that manually.</p>"},{"location":"API/","title":"API","text":""},{"location":"API/#api","title":"API","text":"<p>API stands for application-programmer-interface. Essentially what this means is a way to integrate your code with scratch.</p> <p>Scratch itself provides a number of urls which can be used for interaction via web requests, shown below.</p> <p>Info</p> <p>It is recommended to use an existing library to interact with scratch instead of making your own</p>"},{"location":"API/#organisation","title":"Organisation","text":"<p>This section is organised in a similar way to scratchattach</p> <p>todo list:</p> <ul> <li> Cloud protocol</li> <li> Other apis</li> <li> Site</li> <li> Activity</li> <li> (Educator) Alert</li> <li> Backpack Assets</li> <li> Classrooms</li> <li> Comments</li> <li> Forums</li> <li> TW Placeholder</li> <li> Project</li> <li> Session</li> <li> Studio</li> <li> User</li> </ul>"},{"location":"API/#web-api","title":"Web API","text":"<p>In order to make requests to scratch, there are a multitude of different urls where you can make <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code> and other types of request.</p> <p>These urls can be generally categorized by their subdomain and/or path.</p> <p>Warning</p> <p>This is not a complete list.</p>"},{"location":"API/#scratch","title":"Scratch","text":"URL Purpose https://scratch.mit.edu/ The main website https://api.scratch.mit.edu/ The main API for public use, documented on the scratch wiki https://assets.scratch.mit.edu/ Interaction with assets (costumes and sounds) https://backpack.scratch.mit.edu/ Interaction with the backpack https://scratch.mit.edu/site-api/ An API used internally by the scratch website. Provides access for the same things, but less restrictive, e.g. classroom alerts wss://clouddata.scratch.mit.edu/ This is where the scratch cloud server websocket lives https://projects.scratch.mit.edu Downloading projects https://uploads.scratch.mit.edu Thumbnails/profile images https://translate-service.scratch.mit.edu/ Translation requests - which the translate extension uses https://cdn.scratch.mit.edu Content delivery network - hosts images, css, js, emojis, etc. https://synthesis-service.scratch.mit.edu Text2Speech requests - which the Text2Speech extension uses"},{"location":"API/#ocular","title":"Ocular","text":"URL Purpose https://jeffalo.net/api/ Jeffalo's API https://my-ocular.jeffalo.net/api/ API for ocular"},{"location":"API/#turbowarp","title":"TurboWarp","text":"URL Purpose https://trampoline.turbowarp.org/api/ Serves as a proxy for the scratch api wss://clouddata.turbowarp.org This is where the turbowarp cloud server websocket lives https://share.turbowarp.org/ Turbowarp placeholder. Has endpoints for uploading, downloading, and deleting projects. Note this is 'Not ready for mainstream use'"},{"location":"API/existing-libraries/","title":"Existing libraries","text":"<p>There are a number of pre-existing libraries for interacting with the scratch API</p> <p>Warning</p> <p>This is not a complete list</p> PythonTypeScript Deprecated libraries: <ul> <li>scratchcloud</li> <li>scratchclient</li> <li>node-scratch-client</li> <li>scratch-api (js)</li> </ul> <ul> <li> </li> </ul>"},{"location":"API/existing-libraries/#scratchattach","title":"ScratchAttach","text":"A sync (developing async) python library for the scratch API and other site features."},{"location":"API/existing-libraries/#scapi","title":"Scapi","text":"An async python library for the scratch web API, using aiohttp. Docs in Japanese."},{"location":"API/existing-libraries/#scratchattachts","title":"ScratchAttach.ts","text":"An async TypeScript library for the scratch API (missing features)"},{"location":"CLI/","title":"Scratch CLI","text":""},{"location":"CLI/#scratch-cli","title":"Scratch CLI","text":"<p>Warning</p> <p>This documentation currently does not apply. It is currently documenting a specification for the tool.</p> <p>The Scratch CLI is a command line client for scratch that wraps  scratchattach.</p>"},{"location":"CLI/#why-scratch-cli","title":"Why Scratch CLI?","text":"<p>Scratch CLI is built to be good for account management. It makes it easy to:</p> <ul> <li>Switch between accounts</li> <li>Perform actions with multiple accounts</li> <li>Manage certain groups of accounts</li> </ul> <p>For more info about multi account management, go here</p> <p>It's recommended to add an alias <code>sc</code> to Scratch CLI as will be used in this documentation.  On linux, you can do this using <code>.bashrc</code>.</p>"},{"location":"CLI/#implementation-details","title":"Implementation details","text":"<ul> <li>The CLI will use <code>sqlite</code> (subject to change?)</li> <li>Each command will be implemented in a separate file in the <code>cmd/</code> directory</li> <li>For <code>sessionable</code> commands, run the command for every session in the group.</li> </ul>"},{"location":"CLI/#scratchattach-objects","title":"Scratchattach objects","text":"<p>format: <code>-{object-type} {identifying info} ({other info})</code></p> <ul> <li>Users: <code>-U {username}</code></li> <li>Projects <code>-P {id} (name)</code></li> <li>Studios <code>-S {id} (name)</code></li> </ul> <p>You can view more information about a user/project/studio using <code>sc</code> and then their format, e.g. <code>sc -P 104</code>. Doing this will also save the object's identifying information in the database, so that any subsequent command can relate to that project. e.g. Loading <code>-P 104</code>, then doing <code>sc comment</code>, creating a prompt for a comment on the project with ID 104.</p>"},{"location":"CLI/#commands","title":"Commands","text":"<p>If called without any params (<code>sc</code>), just display the help menu.</p> <p><code>sc messages -L [LIMIT] -O [OFFSET]</code></p> <p>Print out message activity with an offset &amp; limit.</p> <p>Question</p> <p>consider adding message type filters</p> <p><code>sc find -U [USERNAME] -S [STUDIO_ID] -P [PROJECT_ID] [SEARCH_PARAM]</code></p> <p>If no search param is provided, just show the user/project/session page instead. If no USERNAME is provided, default to the session username.</p> <p>Options for search param:</p> <ul> <li><code>lovefeed</code> - Projects loved by scratchers I'm following</li> <li><code>loves</code> | <code>loved</code> - Loved projects (requires USERNAME)</li> <li><code>faves</code> | <code>faved</code> | <code>favorited</code> | <code>favorites</code> - Favorited projects (requires USERNAME)</li> <li><code>shared</code> - Shared projects (requires USERNAME)</li> </ul>"},{"location":"CLI/groups/","title":"Groups","text":""},{"location":"CLI/groups/#groups","title":"Groups","text":"<p>Groups are one of the special features of the scratch CLI. They allow for the grouping of sessions to be able to mass-perform actions.</p> <p><code>sc group new [NAME]</code></p> <p>Create a new group. A prompt will ask for any accounts to add, delimited by spaces.</p> <p><code>sc group switch [NAME]</code></p> <p>You can switch to a group using <code>sc group switch</code>.</p> <p><code>sc group add</code></p> <p>Add sessions to the group. A prompt will ask for any accounts to add, delimited by spaces. Any duplicates will be ignored</p> <p><code>sc group remove</code></p> <p>Remove members of the group. A prompt will ask for which indexes to remove.</p> <p><code>sc group rename</code></p> <p>Rename the group, if possible</p>"},{"location":"CLI/scli_config/","title":"SCLI_CONFIG","text":""},{"location":"CLI/scli_config/#scli_config","title":"SCLI_CONFIG","text":"<p>Scli config is a means of saving extra information for the scratchattach CLI for a user. It is stored in a shared project on that user's profile.</p> <p>The project ID for scli config is stored using base128 or something using ASCII chars and some emojis to use as few chars as possible. It will be separated from everything else by a space or newline.</p> <p>Example of a SCLI-Config compliant <code>About me</code> for faretek1 </p><pre><code>That the true meaning of life is to expend every resource, every second, and every thought, so as to spend as much time on thy computer as possible.\n\n1216591875 &lt;!-- TODO: change this to the special encoded text --&gt; &lt;!-- The associated project: https://scratch.mit.edu/projects/1216591875/ --&gt;\n</code></pre><p></p> <p>The actual scli config data will be stored in a comment inside the project.</p> <p>the project must be named <code>_SCLI_CONFIG_</code> without no sprites - only the stage - with only 1 comment,  which would be the scli config data, which must end in <code>_SCLI_CONFIG_</code></p> <p>The project must be owned by the associated user or be in the saved sessions list (can be outside the group).</p>"},{"location":"CLI/sessions/","title":"Sessions","text":""},{"location":"CLI/sessions/#sessions","title":"Sessions","text":"<p><code>sc login</code> | <code>sc login --id</code></p> <p>In the scratch CLI, an account can be added by session ID, ot by username/password. This will be registered as a session within the database. If the registered username already exists, it will be updated.</p> <p>It will also create a new group with the username, if possible. There will then be an option <code>(Y/n)</code> to add the session to the current group. You can read more about groups here</p>"},{"location":"File%20format/sb/","title":"README","text":""},{"location":"File%20format/sb/#readme","title":"README","text":"<p>Warning</p> <p>This documents version 1 of the scratch file format.</p> file extension .sb actual file extension n/a scratch version 1.4"},{"location":"File%20format/sb/#it-is-currently-recommended-to-use-the-scratch-wiki-documentation","title":"It is currently recommended to use the scratch wiki documentation","text":""},{"location":"File%20format/sb2/","title":"README","text":""},{"location":"File%20format/sb2/#readme","title":"README","text":"<p>Warning</p> <p>This documents version 2 of the scratch file format.</p> file extension .sb2 actual file extension .zip scratch version 2.0"},{"location":"File%20format/sb2/#it-is-currently-recommended-to-use-the-scratch-wiki-documentation","title":"It is currently recommended to use the scratch wiki documentation","text":""},{"location":"File%20format/sb3/","title":"README","text":""},{"location":"File%20format/sb3/#readme","title":"README","text":"<p>Warning</p> <p>This documents version 3 of the scratch file format.</p> file extension .sb3 actual file extension .zip scratch version 3.0"},{"location":"File%20format/sb3/#it-is-currently-recommended-to-use-the-scratch-wiki-documentation","title":"It is currently recommended to use the scratch wiki documentation","text":""},{"location":"SA-Wiki/","title":"Home","text":""},{"location":"SA-Wiki/#home","title":"Home","text":"<p>Scratch API wrapper with support for almost all site features. Created by TimMcCool.</p> <p>This library can set cloud variables, follow Scratchers, post comments and do so much more! It has special features that make it easy to transmit data through cloud variables.</p> <p> </p> <p> </p>"},{"location":"SA-Wiki/#it-is-strongly-advised-to-learn-python-before-using-scratchattach","title":"It is strongly advised to learn Python before using scratchattach.","text":""},{"location":"SA-Wiki/#documentation","title":"Documentation","text":"<ul> <li> <p>Documentation</p> </li> <li> <p>Cloud Variables</p> </li> <li>Cloud Requests</li> <li>Cloud Storage</li> <li>Filterbot</li> <li>Self-hosting a TW cloud websocket</li> </ul>"},{"location":"SA-Wiki/#helpful-resources","title":"Helpful resources","text":"<ul> <li> <p>Get your session id</p> </li> <li> <p>Examples</p> </li> <li> <p>Hosting</p> </li> <li> <p>Migrating to v2</p> </li> </ul> <p>Report bugs by opening an issue on this repository. If you need help or guideance, leave a comment in the official forum topic. Projects made using scratchattach can be added to this Scratch studio.</p>"},{"location":"SA-Wiki/#helpful-for-contributors","title":"Helpful for contributors","text":"<ul> <li> <p>Structure of the library</p> </li> <li> <p>Extended documentation (WIP)</p> </li> <li> <p>Change log</p> </li> </ul> <p>Contribute code by opening a pull request on this repository.</p>"},{"location":"SA-Wiki/#example-usage","title":"\ufe0fExample usage","text":"<p>Set a cloud variable:</p> <pre><code>import scratchattach as sa\n\nsession = sa.login(\"username\", \"password\")\ncloud = session.connect_cloud(\"project_id\")\n\ncloud.set_var(\"variable\", value)\n</code></pre> <p>More examples</p>"},{"location":"SA-Wiki/#getting-started","title":"Getting started","text":"<p>Installation:</p> <p>Run the following command in your command prompt / shell:</p> <pre><code>pip install -U scratchattach\n</code></pre> <p>If this doesn't work, try running: </p><pre><code>python -m pip install -U scratchattach\n</code></pre><p></p> <p>Logging in with username / password:</p> <pre><code>import scratchattach as sa\n\nsession = sa.login(\"username\", \"password\")\n</code></pre> <p><code>login()</code> returns a <code>Session</code> object that saves your login and can be used to connect objects like users, projects, clouds etc.</p> <p>Logging in with a sessionId: You can get your session id from your browser's cookies. More information </p><pre><code>import scratchattach as sa\n\nsession = sa.login_by_id(\"sessionId\", username=\"username\") #The username field is case sensitive\n</code></pre><p></p> <p>Cloud variables:</p> <pre><code>cloud = session.connect_cloud(\"project_id\") # connect to the cloud\n\nvalue = cloud.get_var(\"variable\")\ncloud.set_var(\"variable\", \"value\") # the variable name is specified without the cloud emoji\n</code></pre> <p>Cloud events:</p> <pre><code>cloud = session.connect_cloud('project_id')\nevents = cloud.events()\n\n@events.event\ndef on_set(activity):\n    print(\"variable\", activity.var, \"was set to\", activity.value)\nevents.start()\n</code></pre> <p>Follow users, love their projects and comment:</p> <pre><code>user = session.connect_user('username')\nuser.follow()\n\nproject = user.projects()[0]\nproject.love()\nproject.post_comment('Great project!')\n</code></pre> <p>All scratchattach features are documented in the documentation.</p>"},{"location":"SA-Wiki/Cloud-Requests/","title":"Cloud Requests","text":"<p>Cloud Requests Framework (inspired by di***.py) that allows Scratch projects and Python to interact</p> <p>New in v2.0: Cloud Requests now use threading.Event which massively lowers CPU usage.</p>"},{"location":"SA-Wiki/Cloud-Requests/#basic-usage","title":"Basic usage","text":"<p>Add Cloud Requests to your Scratch project:</p> <p>Download this project file to your computer (click the link to download it): https://github.com/TimMcCool/scratchattach/raw/main/assets/CloudRequests_Template.sb3</p> <p>Then, go to the Scratch website, create a new project and upload the project file from above.</p> <p>How to use with Scratch:</p> <p>Copy this code to your Python editor. How to get your session id</p> <pre><code>import scratchattach as sa\n\nsession = sa.login_by_id(\"session_id\", username=\"username\") #replace with your session_id and username\ncloud = session.connect_cloud(\"project_id\") #replace with your project id\nclient = cloud.requests()\n\n@client.request\ndef ping(): #called when client receives request\n    print(\"Ping request received\")\n    return \"pong\" #sends back 'pong' to the Scratch project\n\n@client.event\ndef on_ready():\n    print(\"Request handler is running\")\n\nclient.start(thread=True) # thread=True is an optional argument. It makes the cloud requests handler run in a thread\n</code></pre> <p>Replace \"session_id\" and \"username\" with your data and \"project_id\" with the id of the project you created on Scratch. Then, run the code.</p> <p>Now go to the Scratch project. In the <code>Cloud Requests</code> sprite, you will find this block:</p> <p></p> <p>When active, it sends a \"ping\" request to the Python client. This will call the <code>ping()</code> function. The data returned by the function will be sent back to the project. Try it out by clicking the block!</p> <p></p> <p>How to use with TurboWarp:</p> <pre><code>import scratchattach as sa\n\ncloud = sa.get_tw_cloud(\"project_id\") #replace with your project id\nclient = cloud.requests()\n\n...\n</code></pre>"},{"location":"SA-Wiki/Cloud-Requests/#examples","title":"Examples","text":"<p>Example 1: Script that loads your message count</p> <p>Scratch code:</p> <p></p> <pre><code>@client.request\ndef message_count(argument1):\n    print(f\"Message count requested for user {argument1}\")\n    user = sa.get_user(argument1)\n    return user.message_count()\n</code></pre> <p>The arguments you specify in the Scratch code are given to the Python function.</p>"},{"location":"SA-Wiki/Cloud-Requests/#basic-features","title":"Basic features","text":"<ul> <li>TCP-like packet loss prevention (new in v2.0)</li> <li>No length limitation for the request or the returned data! (If it is too long for one cloud variable, it will be split into multiple cloud variables)</li> <li>Cloud Requests can handle multiple requests sent at the same time</li> <li>Requests can also return lists, these will be decoded as list in the Scratch project</li> <li>You can freely choose the name of your requests</li> <li>Requests that only return numbers won't be encoded (-&gt; 50% faster!)</li> </ul>"},{"location":"SA-Wiki/Cloud-Requests/#advanced-features","title":"Advanced features","text":"<p>Send data to the Scratch project (new in v2.0)</p> <p>It's now possible to send data to the Scratch project anytime without a priorly received request:</p> <pre><code>client.send(\"message to send\")\n</code></pre> <p>Get the request metadata:</p> <p>In your requests, you can use these functions (since v2.0, they also work for requests running in threads): </p><pre><code>client.get_requester() #Returns the name of the user who sent the request\nclient.get_timestamp() #Returns the timestamp of when the request was sent (in milliseconds since 1970)\nclient.get_exact_timestamp() #Returns the exact timestamp of when the request was sent (fetches it from the clouddata logs). New in v1.2.6\n</code></pre><p></p> <p>Change the used cloud variables: </p><pre><code>client = cloud.requests(used_cloud_vars=[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</code></pre> Enable no-packet-loss:<p></p> <p>No packet loss will make cloud requests reconnect before every sent back request. This eliminates packet loss. </p><pre><code>client = cloud.requests(no_packet_loss=True)\n</code></pre> Send more than two arguments:<p></p> <p>The seperator used to join the different arguments is \"&amp;\". To send more than three arguments from Scratch, join them using \"&amp;\".</p>"},{"location":"SA-Wiki/Cloud-Requests/#advanced-requests","title":"Advanced requests","text":"<p>(new in v1.0.0, updated in v2.0.0)</p> <p>Add arguments to the decorator:</p> <p>Above requests, you put the decorator <code>@client.request</code>. You can use this decorator to customize your requests!</p> <p>Modify the response priority It is possible to change the way sending back request responses is being prioritised. There are three options to choose from:</p> <ol> <li>Respond in receive order (default): Requests received first will be sent back to the Scratch project first</li> </ol> <pre><code>client = cloud.requests(respond_order=\"receive\")\n</code></pre> <ol> <li>Respond in finish order: Requests that finished first will be sent back to the Scratch project first</li> </ol> <pre><code>client = cloud.requests(respond_order=\"finish\")\n</code></pre> <ol> <li>Respond based on individual priority scores: The lower the request's priorit score, the sooner it will be sent back to the Scratch project</li> </ol> <p></p><pre><code>client = cloud.requests(respond_order=\"priority\")\n</code></pre> Use this code to assign priorities to the individual requests: <pre><code>@client.request(response_priority=1)\n</code></pre><p></p> <p>Disable running request in thread By default, requests are ran in threads in v2.0. However, you may want to disable this if your client is getting lots of requests that can be finished within less than 0.1 seconds.</p> <pre><code>@client.request(thread=False)\n</code></pre> <p>Disable request: Put this decorator above a request to disable it: </p><pre><code>@client.request(enabled=False)\n</code></pre><p></p> <p>Overwrite the request name: Put this decorator above a request to overwrite its name with something else: </p><pre><code>@client.request(name=\"new_name\")\n</code></pre><p></p> <p>Manually add, edit and remove requests:</p> <p>Add requests: To add requests, you can also use this method:</p> <pre><code>client.add_request(function, thread=False, enabled=True, name=\"request_name\")\n</code></pre> <p>Edit / Remove requests: </p><pre><code>client.edit_request(\"request_name\", thread=False, enabled=True, new_name=\"request_name\", new_function=new_function) #The keyword arguments are optional and can be removed if they are not needed\nclient.remove_request(\"request_name\")\n</code></pre><p></p>"},{"location":"SA-Wiki/Cloud-Requests/#advanced-events","title":"Advanced events","text":"<p>Events will be called when specific things happen. There are more events than just <code>on_ready</code>!</p> <p>Called after the client connected to the cloud: </p><pre><code>@client.event\ndef on_ready():\n    print(\"Request handler is ready\")\n</code></pre><p></p> <p>Called every time the client receives any request: </p><pre><code>@client.event\ndef on_request(request):\n    print(\"Received request\", request.name, request.requester, request.arguments, request.timestamp, request.request_id)\n</code></pre><p></p> <p>Called when the client receives an unknown / undefined request: </p><pre><code>@client.event\ndef on_unknown_request(request):\n    print(\"Received unknown request\", request.name, request.requester, request.arguments, request.timestamp, request.request_id)\n</code></pre><p></p> <p>Called when an error occurs in a request: </p><pre><code>@client.event\ndef on_error(request, e):\n    print(\"Request: \", request.name, request.requester, request.arguments, request.timestamp, request.request_id)\n    print(\"Error that occured: \", e)\n</code></pre><p></p> <p>Called when the client receives a disabled request: </p><pre><code>@client.event\ndef on_disabled_request(request):\n    print(\"Received disabled request\", request.name, request.requester, request.arguments, request.timestamp, request.request_id)\n</code></pre><p></p>"},{"location":"SA-Wiki/Cloud-Storage/","title":"Cloud Storage","text":"<p>Cloud Storage Framework that makes it easy to store project data by sending it over cloud variables</p>"},{"location":"SA-Wiki/Cloud-Storage/#basic-usage","title":"Basic usage","text":"<p>Add a Cloud Storage to your Scratch project:</p> <p>Download this project file to your computer (click the link to download it): https://github.com/TimMcCool/scratchattach/raw/main/assets/CloudStorage_Template.sb3</p> <p>Then, go to the Scratch website, create a new project and upload the project file from above.</p>"},{"location":"SA-Wiki/Cloud-Storage/#create-a-database-in-your-python-code","title":"Create a database in your Python code","text":"<p>A database is a simple key-value storage. It automatically saves the data to a JSON file on your local device. If the specified JSON file does not exist, scratchattach will create an empty one for storing the data, else it will load the existing data from the JSON file.</p> <pre><code>import scratchattach as sa\nfrom scratchattach import Database\n\ndb1 = Database(\"db_name\", json_file_path=\"path/to/json_file.json\", save_interval=10) # save_interval specifies the wait time between the automated saves to the JSON file\n\n...\n</code></pre>"},{"location":"SA-Wiki/Cloud-Storage/#start-the-cloud-storage","title":"Start the cloud storage","text":"<p>A cloud storage consists of at least one database.</p> <pre><code>...\n\nsession = sa.login(\"username\", \"password\")\ncloud = session.connect_cloud(\"project_id\")\nstorage = cloud.storage()\n\nstorage.add_database(db1)\n# you can add more databases here\n\nstorage.start()\n</code></pre> <p>In your Scratch project, you will find blocks that you can use to get values from the cloud storage or set keys on the cloud storage. They work while the Python backend is running. As you've probably already noticed, cloud storages are based on cloud requests.</p>"},{"location":"SA-Wiki/Cloud-Storage/#advanced","title":"Advanced","text":"<p>Methods of <code>sa.Database</code>: </p><pre><code>db.save_to_json() #saves the data to the JSON file\ndb.keys() #returns the keys of the key-value db\ndb.get(key) #gets a value from the db\ndb.set(key, value)\n</code></pre><p></p> <p>Database events:</p> <p>Can be used to automatically call functions when specific conditions occur.</p> <pre><code>@db.event\ndef on_save():\n    print(\"The data was saved\")\n\n@db.event\ndef on_set(key, value):\n    print(\"Key\", key, \"was set to value\", value)\n</code></pre> <p>Methods of <code>sa.CloudStorage</code>:</p> <pre><code>storage.get(db_name, key)\nstorage.set(db_name, key, value)\nstorage.keys(db_name)\nstorage.databases()\nstorage.database_names()\nstorage.add_database(database)\nstorage.get_database(db_name)\nstorage.save()\n</code></pre>"},{"location":"SA-Wiki/Documentation/","title":"Documentation","text":"<p>You need to have the coding language Python installed on your device. Download Python here if you don't have it: https://www.python.org/downloads/</p>"},{"location":"SA-Wiki/Documentation/#it-is-strongly-advised-to-learn-python-before-using-scratchattach","title":"It is strongly advised to learn Python before using scratchattach.","text":""},{"location":"SA-Wiki/Documentation/#installation","title":"Installation","text":"<p>Run the following command in your command prompt / shell:</p> <pre><code>pip install -U scratchattach\n</code></pre> <p>Then, import the library in Python using:</p> <pre><code>import scratchattach as sa\n</code></pre>"},{"location":"SA-Wiki/Documentation/#usage-with-and-without-a-login","title":"Usage with and without a login","text":"<p>Entrypoint with a login:</p> <p>Scratchattach provides methods for logging in (see below). These methods all return a <code>sa.Session</code> object saving the login / session. This object can be used to connect users, projects, clouds and lots of other stuff.</p> <p>Methods starting with <code>session.connect_</code> (like, for example, <code>session.connect_user(\"username\")</code> will return an object that is connected to the session and allows performing actions that require a login (like <code>user.follow()</code>).</p> <p>The session used to connect the object will also be connected to objects emerging from it (like the <code>sa.Project</code> objects returned by <code>user.projects()</code>), which hence also can be used to perform actions that requiring authentication. This makes it possible to run code like this without having to worry about staying authenticated:</p> <pre><code>sa.login(\"user\", \"password\").connect_user(\"user2\").projects()[0].comment_by_id(\"id\").reply(\"content\")\n</code></pre> <p>Entrypoint without a login:</p> <p>Scratchattach also allows getting data without logging in, by using methods starting with <code>sa.get_</code> (like <code>sa.get_user(\"username\")</code>). However, the returned objects will NOT be connected to a session and therefore can't be used to perfom actions that require authentication, so be careful when to use these methods.</p>"},{"location":"SA-Wiki/Documentation/#logging-in","title":"Logging in","text":"<p>Logging in with username / password:</p> <pre><code>session = sa.login(\"username\", \"password\") #Returns a sa.Session object\n</code></pre> <p>Logging in with a session id:</p> <p>You can get your session id from your browser's cookies. More information</p> <pre><code>session = sa.login_by_id(\"session\", username=\"username\") #Returns a sa.Session object. The username field is case sensitive and optional (you only need to set it when you're on replit)\n</code></pre> <p>Logging in with a session string:</p> <p>This is a scratchattach-specific authentication method. After running <code>session = sa.login(\"username\", \"password\")</code>, your session string is saved in the <code>session.session_string</code> attribute. This encoded string contains both your username / password and session. When using it to log in, scratchattach will first try authenticating using the session id, then attempt logging in by username / password.</p> <pre><code>session = sa.login_by_session_string(\"session_string\") #Returns a sa.Session object\n</code></pre>"},{"location":"SA-Wiki/Documentation/#sasession-class","title":"sa.Session class","text":"<p>Represents and stores a Scratch login / session. Located in <code>scratchattach.site.session</code>. Inherited from the base class <code>sa.BaseSiteComponent</code>.</p> <p>Attributes: </p><pre><code>session.id #The session id associated with the login\nsession.username #The username associated with the login\nsession.xtoken\nsession.new_scratcher #Returns True if the associated account is a New Scratcher\nsession.mute_status #Information about commenting restrictions of the associated account\nsession.banned #Returns True if the associated account is banned\nsession.email #Returns the email address associated with the logged in account\nsession.new_email_address #If an email change was requested, this returns the new (not verified yet) email. New in 2.1.6\nsession.has_outstanding_email_confirmation #Returns whether the associated account verified their email. New in v2.1.6\n# ----- ----- #\nuser.update() #Updates the above data\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#cloud-variables","title":"Cloud variables","text":"<p>Connect a cloud:</p> <pre><code>cloud = session.connect_cloud(\"project_id\") # connects any cloud (by default Scratch one's). Returns a sa.ScratchCloud object by default\ncloud = session.connect_scratch_cloud(\"project_id\") # connects Scratch's cloud. Returns a sa.ScratchCloud object by default\n\ncloud = session.connect_tw_cloud(\"project_id\", purpose=\"(optional) your use case\", contact=\"(optional) your Scratch account or other contact info\")\n# connects TurboWarp's cloud. Returns a sa.TwCloud object by default.\n# Optional arguments: purpose and contact. Providing these arguments allows TurboWarp to understand what you're using their cloud server for.\n# Optional argument: cloud_host (for connecting to custom websockets). To connect to forkphorus's cloud server, use cloud_host=\"wss://stratus.turbowarp.org\"\n</code></pre> <p>Get a cloud without logging in: (methods that require authentication will not work on the returned object)</p> <pre><code>cloud = sa.get_cloud(\"project_id\") #Returns a sa.ScratchCloud object by default\ncloud = sa.get_scratch_cloud(\"project_id\") #Returns a sa.ScratchCloud object\ncloud = sa.get_tw_cloud(\"project_id\") #Returns a sa.TwCloud object\n</code></pre>"},{"location":"SA-Wiki/Documentation/#sascratchcloud-satwcloud-sacustomcloud-classes","title":"sa.ScratchCloud, sa.TwCloud, sa.CustomCloud classes","text":"<p>Represent a Scratch cloud, TurboWarp cloud or another cloud variable server. Located in <code>scratchattach.cloud.cloud</code>.</p> <p><code>sa.ScratchCloud</code>, <code>sa.TwCloud</code> and <code>sa.CustomCloud</code> all inherit from the base class <code>sa.BaseCloud</code>. All classes inheriting from <code>sa.BaseCloud</code> have these methods:</p> <p>Set one cloud variable: </p><pre><code>cloud.set_var(\"variable\", \"value\") # the variable name is specified without the cloud emoji\n</code></pre><p></p> <p>Set multiple cloud variables simultaneously: (new in v2.0) </p><pre><code>cloud.set_vars({\n    \"var1_name\" : \"var1_value\",\n    \"var2_name\" : \"var2_value\",\n    ...\n}) # optional argument: intelligent_waits=True. When setting it to False, you can set cloud variables much faster, but you will get rate limited by Scratch.\n</code></pre><p></p> <p>Get cloud variables: (new in v2.0) </p><pre><code>value = cloud.get_var(\"variable\") # returns the current value of the variable. the variable name is specified without the cloud emoji. In v2.0, you can safely use this method in a loop without spamming the API\nvariables = cloud.get_all_vars() # returns a dict with the current values of all cloud variables. In v2.0, you can safely use this method in a loop without spamming the API\n</code></pre><p></p> <p>Disconnect / reconnect: </p><pre><code>cloud.reconnect()\ncloud.disconnect()\n</code></pre><p></p> <p>Get the clouddata logs: </p><pre><code>logs = cloud.logs() # returns the clouddata logs as list of sa.CloudActivity objects\n</code></pre><p></p> <p>Fully customized clouds (advanced)</p>"},{"location":"SA-Wiki/Documentation/#sacloudactivity-class","title":"sa.CloudActivity class","text":"<p>Represents a cloud activity (a cloud variable set / creation / deletion). Located in <code>scratchattach.site.cloud_activity</code>. Inherited from <code>sa.BaseSiteComponent</code>.</p> <p>Attributes: </p><pre><code>cloud_activity.timestamp # The timestamp of when the activity was performed\ncloud_activity.username # The username of the user who added / set / deleted the cloud variable\ncloud_activity.type # The activity type (\"set\", \"create\" or \"del\")\ncloud_activity.var # The name of the cloud variable that was updated (specified without the cloud emoji)\ncloud_activity.value # If the activity is a variable set, this attribute provides the value it was set to\ncloud_activity.cloud # The cloud this activity was performed on as sa.ScratchCloud, sa.TwCloud or sa.CustomCloud object\n</code></pre><p></p> <p>Methods: </p><pre><code>cloud_activity.load_log_data() # Checks the clouddata logs to find the user who performed the activity. Also loads the exact timestamp\ncloud_activity.actor() # Returns the user who performed the activity as sa.User object\ncloud_activity.project() # Returns the project the activity was performed on as sa.Project object\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#encoding-decoding","title":"Encoding / Decoding","text":"<p>Scratchattach has a built in encoder. Scratch sprite to decode texts encoded with scratchattach: Click here to download</p> <pre><code>from scratchattach import Encoding\n\nEncoding.encode(\"input\") #will return the encoded text\nEncoding.decode(\"encoded\") #will decode an encoded text\n\nsa.encoder.letters #returns the list with letters used by the encoder. You can set indices of this list to add / remove letters. The indices of the letters in this list correspond to the indices of costumes in the Scratch sprite\nEncoding.replace_char(\"old_char\", \"new_char\") #replaces a character in the above list. Don't forget to replace the character in the customes of the Scratch sprite too.\n</code></pre>"},{"location":"SA-Wiki/Documentation/#cloud-events","title":"Cloud Events","text":"<p>Cloud events allow reacting to cloud events in real time. If a Scratcher sets / creates / deletes a cloud var on the given project, an event will be called.</p> <p>All classes inheriting from <code>sa.BaseCloud</code> have the <code>.events()</code> method that returns a cloud event handler.</p> <p>The cloud event handler's class is <code>scratchattach.event_handlers.cloud_events.CloudEvents</code>. This class is inheriting from the base class <code>sa.BaseEventHandler</code>.</p> <p>How to use with Scratch's cloud (data from websocket):</p> <pre><code>import scratchattach as sa\n\nsession = sa.login(\"username\", \"password\") # Log in to Scratch\ncloud = session.connect_scratch_cloud(\"project_id\") # Connect Scratch's cloud\nevents = cloud.events()\n\n@events.event\ndef on_set(activity): #Called when a cloud var is set\n    print(f\"Variable {activity.var} was set to the value {activity.value} at {activity.timestamp}\")\n    # `activity` is a sa.CloudActivity object\n    # To get the user who set the variable, call activity.load_log_data() which saves the username to the activity.username attribute\n\n@events.event\ndef on_del(activity):\n    print(f\"{activity.user} deleted variable {activity.var}\")\n\n@events.event\ndef on_create(activity):\n    print(f\"{activity.user} created variable {activity.var}\")\n\n@events.event #Called when the event listener is ready\ndef on_ready():\n   print(\"Event listener ready!\")\n\nevents.start()\n</code></pre> <p>How to use with Scratch's cloud (data from cloud logs):</p> <pre><code>import scratchattach as sa\n\ncloud = sa.get_scratch_cloud(\"project_id\")\nevents = cloud.events()\n...\n</code></pre> <p>How to use with TurboWarp's cloud:</p> <pre><code>import scratchattach as sa\n\ncloud = sa.get_tw_cloud(\"project_id\")\nevents = cloud.events()\n...\n</code></pre> <p>In scratchattach, all event handlers inheriting from <code>sa.BaseEventHandler</code> have these methods:</p> <pre><code>events.start(thread=True, ignore_exceptions=True)\nevents.pause()\nevents.resume()\nevents.stop()\n</code></pre> <p>Note: In scratchattach v2.0, all events are ran in threads by default. You can disable this using <code>@events.event(thread=False)</code>.</p>"},{"location":"SA-Wiki/Documentation/#cloud-requests","title":"Cloud Requests","text":"<p>Scratchattach provides a Cloud Requests Framework (inspired by discord.py) that allows Scratch projects and Python to interact freely and exchange any kind of data, without having to worry about encoding / decoding or exceeding cloud variable length limits. (Based on Cloud Events)</p> <p>This makes it possible to access data like message counts, user stats and more from Scratch projects! Uses cloud variables to transmit data.</p> <p>Click here to go to Cloud Requests documentation</p> <p>If you want to access external information in Scratch projects or store data on an external database, scratchattach's Cloud Requests are ideal for your project: - Similar to cloud events, but send back data to the project - Automatically encode / decode sent data - Tons of extra features</p>"},{"location":"SA-Wiki/Documentation/#cloud-storage","title":"Cloud Storage","text":"<p>Scratchattach also provides a Cloud Storage Framework that makes it easy to store project data by sending it over cloud variables. The data is stored in JSON files saved on your computer and can be accessed and modified by the Scratch project. (Based on Cloud Requests)</p> <p>This makes it possible to connect a database to your Scratch project!</p> <p>Click here to go to Cloud Storage documentation</p> <p>If you need a simple key-value storage for storing highscores or user data, scratchattach's Cloud Storages are ideal for your project.</p>"},{"location":"SA-Wiki/Documentation/#users","title":"Users","text":"<p>Connect a user by their username: </p><pre><code>user = session.connect_user(\"username\") # Returns a sa.User object\n</code></pre><p></p> <p>Connect a user by their user id: (new in v2.0) </p><pre><code>user = session.connect_user_by_id(\"user_id\") # Returns a sa.User object. Avoid spamming this method, it posts a comment (deleted automatically) every time it is called (no rate limit is activated because the comment is deleted immediately, but still avoid spamming it)\n</code></pre><p></p> <p>Connect the user you are logged in with: </p><pre><code>user = session.connect_linked_user() # Returns a sa.User object\n</code></pre><p></p> <p>Get a user without logging in: (methods that require authentication, like user.follow() or user.post_comment(), will not work on the returned object) </p><pre><code>user = sa.get_user(\"username\") # Returns a sa.User object. Warning: Any methods that require authentication will not work on the returned object\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#sauser-class","title":"sa.User class","text":"<p>Represents a Scratch user. Located in <code>scratchattach.site.user</code>. Inherited from the base class <code>sa.BaseSiteComponent</code>.</p> <p>Attributes: </p><pre><code>user.join_date\nuser.about_me\nuser.username\nuser.wiwo #Returns the user's 'What I'm working on' section\nuser.country #Returns the country from the user profile\nuser.icon_url #Returns the link to the user's pfp (90x90)\nuser.id #Returns the id of the user\nuser.scratchteam #Retuns True if the user is in the Scratch team\n# ----- ----- #\nuser.update() #Updates the above data\n</code></pre><p></p> <p>Methods: </p><pre><code>user.message_count()\nuser.featured_data() #Returns info on the user's featured project as dict\nuser.does_exist() #Returns True if the user exists and False if the user is deleted. New in v1.7.3\nuser.is_new_scratcher() #Returns whether the user is a new Scratcher. New in v1.7.3\n\nuser.follower_count()\nuser.following_count()\nuser.project_count()\nuser.loves_count() # Returns the amount of projects the user has loved. New in v2.1.1\nuser.favorites_count() #Returns the amount of projects the user has favorited\nuser.studio_count() #Returns the amount of studios the user is curating\nuser.studio_following_count()\n\nuser.follower_names(limit=40, offset=0) #Returns the followers as list of usernames (strings). New in v1.1.5\nuser.following_names(limit=40, offset=0) #Returns the people the user is following as a list of usernames (strings). New in v1.1.5\nuser.followers(limit=40, offset=0) #Returns the followers as list of sa.User objects\nuser.following(limit=40, offset=0) #Returns the people the user is following as list of sa.User objects\n\nuser.projects(limit=40, offset=0) #Returns the projects the user has shared as list of sa.Project objects\nuser.favorites(limit=40, offset=0) #Returns the projects the user has favorited as list of sa.Project objects\nuser.studios(limit=40, offset=0) #Returns the studios the user is curating as list of sa.Studio objects\nuser.viewed_projects(limit=24, offset=0) #Returns the projects the user has recently viewed as list of sa.Project objects. To use this, you need to be logged in as the user.\nuser.loves(limit=40, offset=0, get_full_project=False)\n\nuser.follow()\nuser.unfollow()\nuser.is_following(\"scratcher\") #Returns True if user is following the specified Scratcher\nuser.is_followed_by(\"scratcher\") #Returns True if user is followed by the specified Scratcher\n\nuser.activity(limit=1000) # Returns the user's activity as list of sa.Activity objects\nuser.activity_html(limit=1000) # Returns the user's activity as raw HTML document\n\nuser.comments(limit=20, page=1) #Returns the user's profile comments as list of sa.Comment objects\nuser.comment_by_id(\"comment_id\") #Finds the comment and returns it as as sa.Comment object\n\nuser.post_comment(\"comment content\") #Posts a comment on the user's profile and returns it as sa.Comment object. Requires logging in.\nuser.reply_comment(\"comment content\", parent_id=\"parent_id\", commentee_id=\"\") #Warning: Your comment will only be shown on Scratch if parent_id is the comment id of a top level comment\nuser.delete_comment(comment_id=\"comment_id\")\nuser.report_comment(comment_id=\"comment_id\")\n\nuser.toggle_commenting()\nuser.set_bio(text) #Changes the 'About me' of the user\nuser.set_wiwo(text)\nuser.set_featured(\"project_id\", label=\"\") #Changes the featured project\nuser.set_forum_signature(text) # Changes the discuss forum signature of the user. New in v1.7.3\n\nuser.ocular_status() #Returns information about the user's ocular status, like the status text, the color, and the time of the last update.\n</code></pre><p></p> <p>Deprecated methods: (may not work anymore) </p><pre><code>user.stats() #Returns the user's statistics as dict. Fetched from ScratchDB\nuser.ranks() #Returns the user's ranks as dict. Fetched from ScratchDB\nuser.followers_over_time(segment=1, range=30) #Fetched from ScratchDB\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#verifying-a-users-identity","title":"Verifying a user's identity","text":"<p>In some applications, it may be necessary to verify a user's Scratch identity. This is usually done by telling the user to comment a code on a project, and then checking if the user actually commented the code.</p> <p>scratchattach makes it easy to develop this kind of system. It provides a <code>user.verify_identity()</code> function that returns a <code>Verificator</code> object:</p> <pre><code>verificator = user.verify_identity() # The project id where the user has to comment can be specified as `verification_project_id` keyword argument \n</code></pre> <p>The <code>Verificator</code> object has these arguments:</p> <pre><code>verificator.projecturl # The link to the project where the user has to go to verify\nverificator.project # The project where the user has to go to verify as sa.Project object\nverificator.code # The code the user has to comment on the project\n</code></pre> <p>Tell your user to comment the code saved in the <code>verificator.code</code> attribute. To check if the user verified successfully, call the <code>verificator.check()</code> function. If the user commented the code, it will return <code>True</code>.</p>"},{"location":"SA-Wiki/Documentation/#message-events","title":"Message Events","text":"<p>Message events allow reacting to messages in real time. Every time a Scratch receives a message, an event will be called.</p> <p>The message event handler's class is <code>scratchattach.event_handlers.message_events.MessageEvents</code>. This class is inheriting from the base class <code>sa.BaseEventHandler</code>.</p> <p>Observe message count changes on other users:</p> <pre><code>import scratchattach as sa\n\nuser = sa.get_user(\"username\") # Get the user you want to observe\nevents = user.message_events()\n\n@events.event\ndef on_count_change(old_count, new_count): #Called when the user's message count changes.\n    print(\"message count changed from\", old_count, \"to\", new_count)\n\n@events.event #Called when the event listener is ready\ndef on_ready():\n   print(\"Event listener ready!\")\n\nevents.start()\n</code></pre> <p>Call events when you receive messages on your account:</p> <pre><code>import scratchattach as sa\n\nsession = sa.login(\"username\", \"password\")\nevents = session.connect_message_events()\n\n@events.event\ndef on_message(message):\n    # `message` is a sa.Activity object.\n    # All attributes and methods of `message` can be found in the documentation of the sa.Activity class.\n    print(message.actor_username, \"performed action\", self.type)\n\n...\n\nevents.start()\n</code></pre> <p>In scratchattach, all event handlers inheriting from <code>sa.BaseEventHandler</code> have these methods:</p> <pre><code>events.start(thread=True, ignore_exceptions=True)\nevents.pause()\nevents.resume()\nevents.stop()\n</code></pre>"},{"location":"SA-Wiki/Documentation/#filterbot","title":"Filterbot","text":"<p>Scratchattach provides a filterbot framework that can be used to automatically delete spam comments. You can either use pre-made filter profiles (like f4f filter or advertising filter) or set up your own, custom filter rules. (Based on Message Events)</p> <p>Click here to go to Filterbot documentation</p>"},{"location":"SA-Wiki/Documentation/#projects","title":"Projects","text":"<p>Connect a project: </p><pre><code>project = session.connect_project(\"project_id\") # Returns a sa.Project object\n</code></pre><p></p> <p>Create a new project: (never spam this method) </p><pre><code>project = session.create_project(title=\"title\") # Returns a sa.Project object representing the created project. Optional keyword arguments: parent_id and project_json\n</code></pre><p></p> <p>Get a project without logging in: (methods that require authentication, like project.love(), will not work on the returned object)</p> <pre><code>project = sa.get_project(\"project_id\") # Returns a sa.Project object. Warning: Any methods that require authentication will not work on the returned object\n</code></pre>"},{"location":"SA-Wiki/Documentation/#saproject-class","title":"sa.Project class","text":"<p>Represents a Scratch project. Located in <code>scratchattach.site.project</code>. Inherited from the base class <code>sa.BaseSiteComponent</code>.</p> <p>Attributes:</p> <pre><code>project.id  #Returns the project id\nproject.url  #Returns the project url\nproject.title #Returns the project title\nproject.author_name  #Returns the username of the author\nproject.comments_allowed  #Returns True if comments are enabled\nproject.instructions\nproject.notes  #Returns the 'Notes and Credits' section\nproject.created  #Returns the date of the project creation\nproject.last_modified  #Returns the date when the project was modified the last time\nproject.share_date\nproject.thumbnail_url\nproject.remix_parent\nproject.remix_root\nproject.loves  #Returns the love count\nproject.favorites #Returns the project's favorite count\nproject.remix_count  #Returns the number of remixes\nproject.views  #Returns the view count\nproject.project_token\nproject.embed_url #New in v2.1.6\n# ----- ----- #\nproject.update()  #Updates the above data\n</code></pre> <p>Depending on how the object was created, some attributes may not exist or may be None. After running <code>project.update()</code>, all attributes are available.</p> <p>Methods: </p><pre><code>project.author() #Returns the author as sa.User object\nproject.create_remix() #Creates a remix of the project. Never spam this method.\nproject.moderation_status() #Returns the project's moderation status (either \"safe\" or \"notsafe\" (nfe)). Fetched from jeffalo.net\nproject.visibility() #Returns info on the project's visibility. You have to be the project owner to use this.\nproject.is_shared() #Returns True if the project is currently shared\n\nproject.comments(limit=40, offset=0) #Returns all project comments as list of sa.Comment objects\nproject.comment_by_id(\"comment_id\") #Finds the comment and returns it as as sa.Comment object\nproject.comment_replies(comment_id=\"comment_id\", limit=40, offset=0) #Returns all replies to the specified comment as list of sa.Comment objects\n\nproject.post_comment(\"comment content\") #Returns the posted comment as sa.Comment object\nproject.reply_comment(\"comment content\", parent_id=\"parent_id\", commentee_id=\"\") #Warning: Your comment will only be shown on Scratch if parent_id is the comment id of a top level comment\nproject.delete_comment(comment_id=\"comment_id\")\nproject.report_comment(comment_id=\"comment_id\")\n\nproject.love()\nproject.unlove()\nproject.favorite()\nproject.unfavorite()\nproject.post_view() #Does not require authentication\n\nproject.set_title(\"new title\")\nproject.set_instructions(\"new instructions\")\nproject.set_notes(\"new notes and credits\")  #Sets the notes and credits section of the project\nproject.set_thumbnail(file=\"filename.png\") #File must be .png and fit Scratch's thumbnail guidelines\nproject.share()\nproject.unshare()\nproject.set_fields({ ... }, use_site_api=False) #Allows setting multiple fileds (like \"title\", \"instructions\" etc.) simultaneously through scratch's API. When setting use_site_api to True, the deprecated site api will be used (allows setting more fields, but may not work anymore).\n\nproject.body() #Downloads and parses the content of the project and returns it as sa.ProjectBody object (new in v2.0)\nproject.download(filename=\"project_name.sb3\", dir=\"\") #Downloads the project to your computer. The downloaded file will only work in the online editor\nproject.raw_json() #Returns the JSON of the project content as dict\nproject.creator_agent() #Returns the user-agent of the user who created the project (with information about their browser and OS)\n\nproject.set_body(project_body) #Sets the project JSON to a sa.ProjectBody object (which is representing the content of a project)\nproject.set_json(json_data) #Sets the project JSON. Can be used to upload projects. json_data must be a dict or an encoded JSON object with the project JSON.\nproject.upload_from_json(project_id)\n\nproject.turn_off_commenting()\nproject.turn_on_commenting()\nproject.toggle_commenting()\n\nproject.remixes(limit=None, offset=0) #Returns the remixes as list of sa.Project objects\nproject.studios(limit=None, offset=0) #Returns the studios sa list of sa.Studio objects\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#sapartialproject-class","title":"sa.PartialProject class","text":"<p>When connecting / getting a project that you can't access, a <code>sa.PartialProject</code> object is returned. Located in <code>scratchattach.site.project</code>. Inherited from the base class <code>sa.BaseSiteComponent</code>.</p> <p>Methods: </p><pre><code>project.create_remix() #Creates a remix of the unshared project. Never spam this method.\nproject.load_description() #Gets the title and the instructions of the unshared project and saves them to the project.title and project.instructions attributes. It is unclear if the Scratch team allows using this method because it uses an API glitch. Requires authentication.\n\nproject.remixes(limit=None, offset=0) #Returns the unshared project's remixes as list of sa.Project objects\nproject.is_shared() # Will always return False for PartialProject objects\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#studios","title":"Studios","text":"<p>Connect a studio: </p><pre><code>studio = session.connect_studio(\"studio_id\") # Returns a sa.Studio object\n</code></pre><p></p> <p>Get a studio without logging in: (methods that require authentication, like studio.post_comment, will not work on the returned object) </p><pre><code>studio = sa.get_studio(\"studio_id\") # Returns a sa.Project object. Warning: Any methods that require authentication will not work on the returned object\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#sastudio-class","title":"sa.Studio class","text":"<p>Represents a Scratch studio. Located in <code>scratchattach.site.studio</code>. Inherited from the base class <code>sa.BaseSiteComponent</code>.</p> <p>Attributes: </p><pre><code>studio.id\nstudio.title\nstudio.description\nstudio.host_id #The user id of the studio host\nstudio.open_to_all #Whether everyone is allowed to add projects\nstudio.comments_allowed\nstudio.image_url\nstudio.created\nstudio.modified\nstudio.follower_count\nstudio.manager_count\nstudio.project_count\n# ----- ----- #\nstudio.update()  #Updates the above data\n</code></pre><p></p> <p>Depending on how the object was created, some attributes may not exist or may be <code>None</code>. After running <code>studio.update()</code>, all attributes are available.</p> <p>Methods: </p><pre><code>studio.follow()\nstudio.unfollow()\n\nstudio.comments(limit=40, offset=0)  #Returns the studio comments as list of sa.Comment objects\nstudio.comment_by_id(comment_id=\"comment_id\") #Finds the comment and returns it as as sa.Comment object\nstudio.comment_replies(comment_id=\"comment_id\", limit=40, offset=0) #Returns all replies to the specified comment as list of sa.Comment objects\n\nstudio.post_comment(\"comment content\") #Returns the posted comment as sa.Comment object\nstudio.reply_comment(\"comment content\", parent_id=\"parent_id\", commentee_id=\"\") #Warning: Your comment will only be shown on Scratch if parent_id is the comment id of a top level comment\nstudio.delete_comment(comment_id=\"comment_id\")\nstudio.report_comment(comment_id=\"comment_id\")\n\nstudio.add_project(\"project_id\")\nstudio.remove_project(\"project_id\")\n\nstudio.set_description(\"new description\")\nstudio.set_title(\"new title\")\nstudio.set_thumbnail(file=\"filename.png\") # New in v1.4.5. File must fit Scratch's thumbnail guidelines. Returns a link to the uploaded thumbnail.\nstudio.open_projects() #Allows everyone to add projects\nstudio.close_projects()\nstudio.set_fields({ ... }) #Sets fields using the scratch.mit.edu/site-api PUT API\n\nstudio.turn_off_commenting() # New in v1.0.1\nstudio.turn_on_commenting()\nstudio.toggle_commenting()\n\nstudio.invite_curator(\"username\")\nstudio.promote_curator(\"username\")\nstudio.remove_curator(\"username\")\nstudio.accept_invite() #If there is a pending invite for you, this function will accept it\nstudio.leave() #Removes yourself from the studio\n\nstudio.projects(limit=40, offset=0) #Returns the studio's projects as list of sa.Project objects\nstudio.activity(limit=24, offset=0) #Returns the studio's activity as list of sa.Activity objects\nstudio.curators(limit=24, offset=0) #Returns the curators as list of sa.User objects\nstudio.managers(limit=24, offset=0) #Returns the managers as list of sa.User objects\nstudio.host() #Returns the studio host as sa.User object\n\nstudio.transfer_ownership(\"new_owner\", password=\"password\") #Irreversibly makes another Scratcher studio host. You need to specify your password to do this.\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#comments","title":"Comments","text":"<p>Connect / get a comment:</p> <pre><code>comment = project.comment_by_id(\"comment_id\") # Returns a sa.Comment object representing a project comment\ncomment = user.comment_by_id(\"comment_id\") # Returns a sa.Comment object representing a profile comment\ncomment = studio.comment_by_id(\"comment_id\") # Returns a sa.Comment object representing a studio comment\n</code></pre>"},{"location":"SA-Wiki/Documentation/#sacomment-class","title":"sa.Comment class","text":"<p>Represents a Scratch comment. Located in <code>scratchattach.site.comment</code>. Inherited from the base class <code>sa.BaseSiteComponent</code>.</p> <p>Attributes: </p><pre><code>comment.id # The comment id\ncomment.parent_id # The id of the corresponding top level comment if this comment is a reply, else None\ncomment.commentee_id # The id of the user that this comment mentions\ncomment.content # The comment content\ncomment.datetime_created\ncomment.author_name # The username of the comment author\ncomment.author_id # The user id of the comment author\ncomment.written_by_scratchteam # Whether a Scratch team member posted this comment\ncomment.reply_count\ncomment.source # The type of place where this comment was posted (either \"studio\", \"profile\" or \"project\")\ncomment.source_id # An ID identifying the place where this comment was posted (either a studio id, a username or a project id)\n</code></pre><p></p> <p>Methods: </p><pre><code>comment.author() # Returns the author of the comment as sa.User object\ncomment.place() # Returns the place where the comment was posted as sa.Project, sa.User or sa.Studio project. If the place wasn't saved, this returns None.\ncomment.parent_comment() # Returns the corresponding top-level comment as sa.Comment object if this comment is a reply, else None\ncomment.replies() # Returns the replies to this comment as list of sa.Comment objects\n\ncomment.reply(\"comment content\") # Posts a reply to this comment and returns it as sa.Comment object. Automatically sets the parent_id and commentee_id fields correctly\ncomment.delete() # Deletes the comment\ncomment.report() # Reports the comment to the Scratch team\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#activites-messages","title":"Activites / Messages","text":"<p>Connect your messages: </p><pre><code>activites = session.messages(limit=40, offset=0, date_limit=None, filter_by=None) # Returns your Scratch messages as list of sa.Activity objects. You can use date_limit to only include activities from after a specific date. Options for filter_by are None (no filter), \u201ccomments\u201d, \u201cprojects\u201d, \u201cstudios\u201d or \u201cforums\u201d\n</code></pre><p></p> <p>Connect your front page \"What's happening\" feed: </p><pre><code>activities = session.feed(limit=20, offset=0, date_limit=None) # Returns your feed as list of sa.Activity objects. You can use date_limit to only include activities from after a specific date.\n</code></pre><p></p> <p>Connect / get user or studio activities: </p><pre><code>activites = user.activity() # Returns the user's activities as list of sa.Activity objects\nactivites = studio.activity() # Returns the studio's activities as list of sa.Activity objects\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#saactivity-class","title":"sa.Activity class","text":"<p>Represents a message, a \"What's happening\"-activity, a user profile activity or a studio activity. Scratch uses the same class for representing these kind of objects, therefore scratchattach does too.</p> <p>Located in <code>scratchattach.site.activity</code>. Inherited from the base class <code>sa.BaseSiteComponent</code>.</p> <p>Attributes: </p><pre><code>activity.id # The ID of the activity\nactivity.type # Specificies the activity type (\"loveproject\", \"becomecurator\", \"followuser\", \"addcomment\", and many others)\nactivity.actor_username # The name of the user who performed the activity\nactivity.actor_id # The id of the user who performed the activity\nactivity.datetime_created # When the activity was performed\n\n# If the activity type is addcomment:\nactivity.comment_fragment # The comment content\nactivity.comment_obj_title # The id of the place where the comment was posted\nactivity.comment_obj_id # The comment id\n...\n\n# If the activity type is loveproject:\nactivity.project_id # The loved project\nactivity.project_title\n\n# If the activity type is followstudio:\nactivity.gallery_id # The studio id\nactivity.title # The studio title\n...\n</code></pre> Depending on how the object was created, there may be more attributes than listed above, or some attributes may not exist.<p></p> <p>Tip: Use <code>activity.__dict__</code> to convert an <code>sa.Activity</code> to a <code>dict</code>. You can use <code>print(activity.__dict__)</code> to see the object's attributes and values.</p> <p>Methods: </p><pre><code>activity.actor() # Returns the user who performed the activity as sa.User object\nactivity.target() # Returns the activity's target (depending on the activity, this is either a sa.User, sa.Project, sa.Studio or sa.Comment object). May also return None if the activity type is unknown\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#data-from-scratchs-main-pages","title":"Data from Scratch's main pages","text":""},{"location":"SA-Wiki/Documentation/#front-page","title":"Front page","text":"<pre><code>sa.get_news(limit=10, offset=0) #Returns the news from the Scratch front page as list\n\nsa.featured_data() #Returns all front page data as dict\n\nsa.featured_projects() #Returns the featured projects from the Scratch homepage as list of sa.Project objects\nsa.featured_studios() #Returns the featured studios from the Scratch homepage as list of sa.Studio objects\nsa.top_loved()\nsa.top_remixed()\nsa.newest_projects() #Returns a list with the newest Scratch projects as list of sa.Project objects. This list is not present on the Scratch home page, but the API still provides it.\nsa.design_studio_projects()\nsa.curated_projects()\n\nsession.feed(limit=20, offset=0) #Returns your \"What's happening\" section from the Scratch front page as list of sa.Activity objects\nsession.loved_by_followed_users(limit=40, offset=0) #Returns the projects loved by users you are following as list of sa.Project objects\n</code></pre>"},{"location":"SA-Wiki/Documentation/#search","title":"Search","text":"<pre><code>session.search_projects(query=\"query\", mode=\"trending\", language=\"en\", limit=40, offset=0)\nsa.search_projects(query=\"query\", mode=\"trending\", language=\"en\", limit=40, offset=0) # Search projects without logging in. Methods requiring authentication won't work on the returned objects\n\nsession.search_studios(query=\"query\", mode=\"trending\", language=\"en\", limit=40, offset=0)\nsa.search_studios(query=\"query\", mode=\"trending\", language=\"en\", limit=40, offset=0) # Search studios without logging in. Methods requiring authentication won't work on the returned objects\n</code></pre>"},{"location":"SA-Wiki/Documentation/#explore","title":"Explore","text":"<pre><code>session.explore_projects(query=\"query\", mode=\"trending\", language=\"en\", limit=40, offset=0)\nsa.explore_projects(query=\"query\", mode=\"trending\", language=\"en\", limit=40, offset=0) # Search projects without logging in. Methods requiring authentication won't work on the returned objects\n\nsession.explore_studios(query=\"query\", mode=\"trending\", language=\"en\", limit=40, offset=0)\nsa.explore_studios(query=\"query\", mode=\"trending\", language=\"en\", limit=40, offset=0) # Search studios without logging in. Methods requiring authentication won't work on the returned objects\n</code></pre>"},{"location":"SA-Wiki/Documentation/#messages","title":"Messages","text":"<pre><code>session.messages(limit=40, offset=0, date_limit=None, filter_by=None) #Returns your messages as list of sa.Activity objects\nsession.admin_messages() #Returns your unread admin notifications / alerts from the Scratch team\nsession.clear_messages() #Marks your messages as read\nsession.get_message_count() #Returns your message count. Fetched from the API used by 2.0-style pages.\n</code></pre>"},{"location":"SA-Wiki/Documentation/#my-stuff","title":"My stuff","text":"<pre><code>projects = session.mystuff_projects(\"all\", page=1, sort_by=\"\", descending=True) # Returns a list of sa.Project objects\nstudios = session.mystuff_studios(\"all\", page=1, sort_by=\"\", descending=True) # Returns a list of sa.Studio objects\n</code></pre> <p>Arguments: * filter_arg (str): Possible values for this parameter are \"all\", \"shared\", \"unshared\" and \"trashed\"</p> <p>Keyword Arguments: * page (int): The page of the <code>My Stuff</code> projects or studios that should be returned * sort_by (str): The key the projects should be sorted based on. Possible values for this parameter are \"\" (then the projects are sorted based on last modified), \"view_count\", love_count\", \"remixers_count\" (then the projects are sorted based on remix count) and \"title\" (then the projects are sorted based on title) * descending (boolean): Determines if the element with the highest key value (the key is specified in the <code>sort_by</code> argument) should be returned first. Defaults to <code>True</code>.</p>"},{"location":"SA-Wiki/Documentation/#statistics","title":"Statistics","text":"<pre><code>sa.total_site_stats()\nsa.monthly_site_traffic()\nsa.country_counts()\nsa.age_distribution()\nsa.monthly_comment_activity()\nsa.monthly_project_shares()\nsa.monthly_active_users()\nsa.monthly_activity_trends()\n</code></pre>"},{"location":"SA-Wiki/Documentation/#multi-event-handler","title":"Multi-event handler","text":"<p>If you want to run cloud events, cloud requests or message events on multiple projects / users simultaneously without having to define everything multiple times, use scratchattach's <code>sa.MultiEventHandler</code> class:</p> <pre><code>from scratchattach import MultiEventHandler\n\n# Initialize your cloud events / cloud requests / message events instances:\n# (In this example, cloud requests are used, but the same can be done with any scratchattach event handler)\n\nsession = sa.login(\"username\", \"password\")\nclient1 = session.connect_cloud(\"project_id_1\").requests()\nclient2 = session.connect_cloud(\"project_id_2\").requests()\nclient3 = session.connect_cloud(\"project_id_3\").requests()\nclient4 = session.connect_cloud(\"project_id_4\").requests()\n\n# Combine the cloud requests using MultiEventHandler:\n\ncombined = MultiEventHandler(client1, client2, client3, client4)\n\n# Define your events and requests:\n\n@combined.event # defines the event for all eventhandlers that were combined\ndef on_ready():\n    print(\"Cloud requests are ready\")\n\n@combined.request # defines the request for all request handlers that were combined\ndef your_request():\n    ...\n\n# Start all event / request handlers:\ncombined.start()\n</code></pre>"},{"location":"SA-Wiki/Documentation/#hosting-a-cloud-server","title":"Hosting a cloud server","text":"<p>TurboWarp allows you to use a custom cloud variable websocket server by setting the <code>?cloud_host=</code> URL parameter to its address.</p> <p>Example: When hosting a websocket server on <code>127.0.0.1:8080</code>, you can open <code>turbowarp.org/702543294?cloud_host=ws://127.0.0.1:8080</code> in your browser to play griffpatch's slither.io remake while using your locally hosted server as cloud server (instead of TurboWarp's cloud server which is used by default).</p> <p>Scratchattach makes it easy to set up a cloud websocket server which works with TurboWarp's cloud and gives you lots of customization.</p>"},{"location":"SA-Wiki/Documentation/#why-host-your-own-cloud-variable-server","title":"Why host your own cloud variable server?","text":"<ul> <li>You have full control over who is playing your cloud project: You can see all players (with their IP addresses), disconnect players, ban IP addresses anytime etc.</li> <li>You have full control over what cloud values can be set: For example, you can allow non-numeric cloud values (values containing letters) and set a custom length limit for cloud values</li> <li>You can freely manipulate the behavior of the cloud server</li> <li>You can set and get cloud variables server-side any time</li> <li>You have full control over when your cloud server is running</li> </ul>"},{"location":"SA-Wiki/Documentation/#getting-started","title":"Getting started","text":"<p>To host a cloud server locally, simply run:</p> <pre><code>server = sa.init_cloud_server()\nserver.start()\n</code></pre> <p>By default, your server will be running on <code>127.0.0.1:8080</code>. To use it on TurboWarp, add the <code>?cloud_host=ws://127.0.0.1:8080</code> parameter to the URL.</p> <p>Warning: The server is only available locally on your computer. To make it possible for others to join it, you need to host it somewhere. More info on how to do this is coming soon.</p>"},{"location":"SA-Wiki/Documentation/#features","title":"Features","text":"<p>Customize your server:</p> <p></p><pre><code>server = sa.init_cloud_server(\n    '127.0.0.1', 8080, # set IP address and port\n    thread=True, # if set to True, the server will run in a thread\n    length_limit=None, allow_non_numeric=True, # customize what cloud values are allowed\n    whitelisted_projects=None, allow_nonscratch_names=True, blocked_ips=[],\n    sync_players=True, # when set to False, other players will no longer be notified about cloud updates (only the server will see and parse them)\n    log_var_sets=True # when set to True, all var sets will be printed to the console (can be spammy)\n)\n</code></pre> Get the cloud variable data from the currently active projects: <pre><code>data = server.active_projects()\n</code></pre> Get the users that are currently connected: <pre><code>usernames = server.active_user_names(project_id) # gets users currently active on the specified project\nuser_ips = server.active_user_ips(project_id)\n</code></pre> Get cloud variables from your server: <pre><code>variables = server.get_global_vars()\nvariables = server.get_project_vars(project_id)\nvalue = server.get_var(project_id, var_name)\n</code></pre> Set cloud variables: (all connected users will autom. receive the cloud variable update) <pre><code>server.set_global_vars({\n    \"project_id1\":{\"var1\":\"value1\", \"var2\":\"value\", ... },\n    ... \n})\n\nserver.set_project_vars(\"project_id\", {\"var1\":\"value1\", \"var2\":\"value\", ... })\nserver.set_var(\"project_id\", \"variable_name\", \"value\")\n</code></pre><p></p> <p>Also available:</p> <pre><code>server.pause()\nserver.resume()\nserver.stop()\n</code></pre>"},{"location":"SA-Wiki/Documentation/#project-json-editing","title":"Project JSON editing","text":"<p>Load the project JSON of a project from the website: </p><pre><code>pb = session.connect_project(\"project_id\").project_body() # Returns a sa.ProjectBody object\npb = sa.get_project(\"project_id\").project_body() # Returns a sa.ProjectBody object. Doesn't require a login / session\n</code></pre> Load the project JSON from a sb3 file: <pre><code>pb = sa.read_sb3_file(\"path_to_file\") # Returns a sa.ProjectBody object\n</code></pre> Load an empty project JSON: <pre><code>pb = session.connect_empty_project_pb() # Returns a sa.ProjectBody object\npb = sa.get_empty_project_pb() # Returns a sa.ProjectBody object. Doesn't require a login / session\n</code></pre><p></p> <p>When using <code>session.connect_</code> methods for fetching the <code>sa.ProjectBody</code> object, assets you add using the <code>sa.ProjectBody.Sprite.add_asset</code> method will automatically be uploaded to the Scratch website.</p>"},{"location":"SA-Wiki/Documentation/#saprojectbody-class","title":"sa.ProjectBody class","text":"<p>Represents and saves a parsed project JSON. The components of the project are loaded into <code>sa.ProjectBody.Block</code>, <code>sa.ProjectBody.Sprite</code>, <code>sa.ProjectBody.Variable</code> etc. objects.</p> <p>Attributes: </p><pre><code>pb.sprites # A list of the project sprites represented by sa.ProjectBody.Sprite objects\npb.monitors # A list of the project's variable and list monitors represented by sa.ProjectBody.Monitor objects\npb.extensions # A list saving the names of the project's extensions (\"pen\" etc.)\npb.meta # Metadata of the project\n</code></pre><p></p> <p>Methods and sub-classes of sa.ProjectBody</p> <p>This section will be expanded soon</p>"},{"location":"SA-Wiki/Documentation/#backpack","title":"Backpack","text":"<p>Connect the assets in your backpack: </p><pre><code>backpack = session.backpack(limit=20, offset=0) # Returns a list of sa.BackpackAsset objects\n</code></pre> Delete an asset from your backpack by id: <pre><code>session.delete_from_backpack(\"backpack_asset_id\")\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#sabackpackasset-class","title":"sa.BackpackAsset class","text":"<p>Represents an asset from the backpack. Located in <code>scratchattach.site.backpack_asset</code>. Inherited from the base class <code>sa.BaseSiteComponent</code>.</p> <p>Attributes: </p><pre><code>bpasset.id # The asset id\nbpasset.type # The asset type (custome, script, etc.)\nbpasset.mime # The format in which the content of the backpack asset is saved\nbpasset.name # The name of the backpack asset\nbpasset.filename # Filename of the file containing the content of the backpack asset\nbpasset.thumbnail_url # Link that leads to the asset's thumbnail (the image shown in the backpack UI)\nbpasset.download_url # Link that leads to a file containg the content of the backpack asset\n</code></pre> Methods: <pre><code>bpasset.download(dir=\"\") # Downloads the asset content to the given directory\nbpasset.delete() # Deletes the asset from the backpack\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#forum","title":"Forum","text":"<p>Connect a forum topic: </p><pre><code>topic = session.connect_topic(\"topic_id\") # Returns a sa.ForumTopic object\n</code></pre> Get a forum topic without logging in: (methods that require authentication will not work on the returned object) <pre><code>topic = sa.get_topic(\"topic_id\") # Returns a sa.ForumTopic object\n</code></pre> Connect a list of the topics in a category: <pre><code>topic_list = session.connect_topic_list(category_id, page=0) # Returns a list of sa.ForumTopic objects\n</code></pre> Get a list of the topics in a category without logging in: <pre><code>topic_list = sa.get_topic_list(category_id, page=0) # Returns a list of sa.ForumTopic objects\n</code></pre> Change your forum signature: <pre><code>session.connect_linked_user().set_forum_signature(\"new signature text\")\n</code></pre><p></p> <p>Getting a forum post by ID is no longer possible because ScratchDB is down indefinitely.</p>"},{"location":"SA-Wiki/Documentation/#saforumtopic-class","title":"sa.ForumTopic class","text":"<p>Represents a Scratch forum topic. Located in <code>scratchattach.site.forum</code>. Inherited from the base class <code>sa.BaseSiteComponent</code>.</p> <p>Attributes: </p><pre><code>topic.id\ntopic.title\ntopic.category_name\ntopic.last_updated\n# Attributes only available if the object was created using sa.get_topic_list or session.connect_topic_list:\ntopic.reply_count\ntopic.view_count\n# ----- ----- #\ntopic.update()  #Updates the above data (except for topic.reply_count and topic.view_count)\n</code></pre><p></p> <p>Methods: </p><pre><code>topic.posts(page=1) #Returns the topic posts as list of sa.ForumPost objects (oldest post first). First page is at index 1.\ntopic.first_post() #Returns the first topic post as sa.ForumPost object\n</code></pre><p></p> <p>To prevent spam, adding posts to topics is not a scratchattach feature and never will be.</p>"},{"location":"SA-Wiki/Documentation/#saforumpost-class","title":"sa.ForumPost class","text":"<p>Represents a Scratch forum post. Located in <code>scratchattach.site.forum</code>. Inherited from the base class <code>sa.BaseSiteComponent</code>.</p> <p>Attributes: </p><pre><code>post.id\npost.author_name\npost.author_avatar_url\npost.posted #The date the post was made\npost.topic_id # The id of the topic this post is in\npost.topic_name # The name of the topic the post is in\npost.topic_category # The name of the category the post topic is in\npost.topic_num_pages # The number of pages the post topic has\npost.deleted # Whether the post was deleted (always False because deleted posts can't be retrieved anymore)\npost.html_content #Returns the content as HTML\npost.content #Returns the content as text\npost.post_index # The index that the post has in the topic\n# ----- ----- #\npost.update()  #Updates the above data\n</code></pre><p></p> <p>Methods: </p><pre><code>post.topic() #Returns the topic the post is in as sa.ForumTopic object\npost.author() #Returns the post author as sa.User object\n\npost.edit(\"new content\") #Requires you to be the post author.\npost.ocular_reactions()\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#classrooms","title":"Classrooms","text":"<p>Connect a classroom by its id: </p><pre><code>classroom = session.connect_classroom(\"classroom_id\") # Returns a sa.Classroom object\n</code></pre><p></p> <p>Connect a classroom by its token: </p><pre><code>classroom = session.connect_classroom_from_token(\"classroom_token\") # Returns a sa.Classroom object\n</code></pre><p></p> <p>Get a classroom without logging in: </p><pre><code>classroom = sa.get_classroom(\"classroom_id\") # Returns a sa.Classroom object\nclassroom = sa.get_classroom_from_token(\"classroom_token\") # Returns a sa.Classroom object\n</code></pre><p></p> <p>Only classrooms that have not been ended can be fetched.</p>"},{"location":"SA-Wiki/Documentation/#saclassroom-class","title":"sa.Classroom class","text":"<p>Represents a Scratch classroom. Located in <code>scratchattach.site.classroom</code>. Inherited from the base class <code>sa.BaseSiteComponent</code>.</p> <p>Attributes: </p><pre><code>classroom.id\nclassroom.title\nclassroom.about_class # classroom description \"about\" section\nclassroom.working_on # classroom description \"working on\" section\nclassroom.datetime # when the classroom was created. datetime.datetime object\nclassroom.author # the user who created the classroom as sa.User object. Some attributes of this object are not available immediately - to load them, use classroom.author.update()\n# ----- ----- #\nclassroom.update()  #Updates the above data\n</code></pre><p></p> <p>Methods: </p><pre><code>classroom.student_count()\nclassroom.student_names() # Returns a list with the usernames of the students\nclassroom.class_studio_count()\nclassroom.class_studio_ids() # Returns a list with the ids of the studios\n</code></pre><p></p>"},{"location":"SA-Wiki/Documentation/#other-apis","title":"Other APIs","text":"<pre><code>session.become_scratcher_invite() #If you are a new Scratcher and have been invited for becoming a Scratcher, this method will return more info on the invite\nsession.set_country(\"Antarctica\") #Changes the account's country\nsession.resend_email(\"password\") #Resends the verification email. Requires providing your password.\nsession.logout() #Destroys the session saved by this Session object. Warning: The session is not entirely gone and can still be used to do some things, like setting cloud variables.\n\nsa.get_health() #Returns Scratch's health data\nsa.get_total_project_count() #May not work sometimes (timeout error)\nsa.check_username(\"username\") #Checks if the username is available and allowed for a new account\nsa.check_password(\"password\") #Checks if the password is eligible for being set as Scratch account password\n\nsa.get_csrf_token() #Returns a scratchcsrftoken which is fetched from Scratch's API\nsa.get_resource_urls() #New in v2.1.6\nsa.scratch_team_members() #New in v2.1.6\n\nsa.youtube_link_to_scratch(\"youtube_url\") #Converts a YouTube url (in multiple formats) to a link like https://scratch.mit.edu/discuss/youtube/1JTgg4WVAX8\n\nsa.aprilfools_get_counter() #See: https://en.scratch-wiki.info/wiki/April_Fools%27_Day#Recurring_Pranks\nsa.aprilfools_increment_counter()\n\nsa.translate(sa.Languages.Hungarian, \"hello world\") #Translates the 2nd argument to the language provided in the 1st argument, using the API of Scratch's translate blocks\nsa.text2speech(\"text\", \"female\", \"en-US\") #Returns an audio file in which the given text is spoken. The 2nd argument provides the speaker's voice type, the 3rd argument provides the language. Uses the API of Scratch's TTS blocks.\n</code></pre> <p>To prevent account stealing, changing password / email is not a scratchattach feature and never will be.</p>"},{"location":"SA-Wiki/Documentation/#advanced","title":"Advanced","text":""},{"location":"SA-Wiki/Documentation/#proxies","title":"Proxies","text":"<pre><code>from scratchattach.utils.requests import Requests\nRequests.proxies = {} # set this to a dict that contains your proxies\n</code></pre> <p>Your proxies will be applies to all HTTP requests performed by scratchattach (except for websocket connects)</p>"},{"location":"SA-Wiki/Documentation/#fully-customized-clouds","title":"Fully customized clouds","text":"<p>Option 1: sa.CustomCloud class</p> <pre><code>cloud = sa.CustomCloud(\n    project_id = \"project_id\", cloud_host = \"wss://...\", username = \"username\", length_limit = 10000, allow_non_numeric = False, _session = None, header = None, cookie = None, origin = None, print_connect_messages = False\n)\n</code></pre> <p>All keyword arguments (kwargs) provided to the constructor will be set as attributes of the CustomCloud object</p> <p>Option 2: Create your own class inheriting from sa.BaseCloud</p> <p>This makes it possible to override methods. For example, you can define your own .set_var method:</p> <pre><code>class MyCloud(sa.BaseCloud):\n\n    def __init__(self, *, project_id, cloud_host, ... ): # you can add more arguments\n        super().__init__()\n\n        # Attributes that must be set in every class inheriting from sa.BaseCloud:\n        self.project_id = project_id\n        self.cloud_host = cloud_host\n\n        # Set other attributes, like self.allow_non_numeric or self.length_limit (click the link below for full list)\n\n    def set_var(self, variable, value):\n\n        # Insert your custom code for the set_var function here\n\n        super().set_var(variable, value)\n</code></pre> <p>Attributes you can set in the constructor of your class</p> <p>Initialize an object of the new class:</p> <pre><code>cloud = MyCloud(project_id=\"project_id\", cloud_host=\"wss://...\", ...)\n</code></pre> <p>The methods that can be used on <code>sa.ScratchCloud</code> and <code>sa.TwCloud</code> objects (like <code>.set_var</code> or <code>.get_var</code>) can also be used on <code>sa.CustomCloud</code> objects and all other objects that inherit from the <code>sa.BaseCloud</code> class.</p>"},{"location":"SA-Wiki/Documentation/#note-regarding-iterative-apis-like-methodlimit40-offset0","title":"Note regarding iterative APIs (like <code>method(limit=40, offset=0)</code>)","text":"<p>In v2.0, you can set the <code>limit</code> argument to any value. scratchattach will automatically do the API queries required for getting the requested amount of objects. For big <code>limit</code> parameter values (&gt;400), this will take some time tho.</p>"},{"location":"SA-Wiki/Examples/","title":"Example scripts","text":""},{"location":"SA-Wiki/Examples/#example-scripts","title":"Example scripts","text":"<p>Set a cloud var with scratchattach: </p><pre><code># Example: Set Cloud Variable\n\nimport scratchattach as sa# Import the scratchattach module\n\nsession = sa.login(\"username\", \"password\") # Login with Scratch login information (replace with your username and password)\ncloud = session.connect_cloud(\"project_id\") # Replace project_id with your project ID\n\ncloud.set_var(\"variable\", value) # Set a cloud variable to a certain value (int, float or string consisting of numbers). The variable name is specified without the cloud emoji\n</code></pre><p></p> <p>Love a Scratch project: </p><pre><code>import scratchattach as sa\nsession = sa.login(\"username\", \"password\") # Login with Scratch login information (replace with your username and password)\nproject = session.connect_project(\"project_id\") # Replace project_id with your project ID\nproject.love()\n</code></pre><p></p> <p>Cloud event handler: </p><pre><code>import scratchattach as sa # Import the scratchattach module\nevents = sa.get_cloud(\"project_id\").events() # Replace project_id with your project id. No login required.\n\n@events.event\ndef on_set(activity): #Called when a cloud var is set\n    # Things inside here only happen if a cloud variable is set. \n    print(f\"{activity.user} set the variable {activity.var} to the value {activity.value} at {activity.timestamp}\")\n\nevents.start() # Start listening for events. \n</code></pre><p></p> <p>Comment on a project: </p><pre><code>import scratchattach as sa # Import the scratchattach module\n\nsession = sa.login(\"username\", \"password\") # Log in with Scratch login information (replace with your username and password)\nproject = session.connect_project(\"project_id\") # Replace project_id with your project id\n\ncomment = project.post_comment(\"Hi guys!\") # Post a comment on the project and save the posted comment in a variable\n</code></pre><p></p> <p>Follow a user: </p><pre><code>import scratchattach as sa\nsession = sa.login(\"username\", \"password\") # Login with Scratch login information (replace with your username and password)\nuser = session.connect_user(\"user_to_follow\")\nuser.follow()\n</code></pre><p></p> <p>Automatically update your profile with your follower count: </p><pre><code>import scratchattach as sa # Import the scratchattach module\nimport time # Import time module.\n\nsession = sa.login(\"username\", \"password\") # Log in with Scratch login information (replace with your username and password).\nuser = session.connect_linked_user() # Get the your Scratch profile as User object.\n\nwhile True:\n    follower_count = user.follower_count() # Get follower count\n    user.set_bio(f\"My follower count: {follower_count}\") # Updates \"What I'm working on\" section on your profile.\n    time.sleep(60) # Waits 60 seconds before updating the section again. \n</code></pre><p></p>"},{"location":"SA-Wiki/Examples/#example-projects","title":"Example projects","text":"<p>Warning: These examples still use scratchattach v1 and are therefore outdated</p> <p>Check out this repo: https://github.com/mas6y6/scratchattach-examples</p> <p>Also: https://github.com/programORdie2/servers24-7</p> <p>More coming soon </p>"},{"location":"SA-Wiki/Filterbot/","title":"Filterbot","text":"<p>Filterbot framework that can be used to automatically delete spam comments. You can either use pre-made filter profiles (like f4f filter or advertising filter) or set up your own, custom filter rules. </p> <p>Note: Since you don't receive messages for your own comments, commenty posted by you are not deleted by the filterbot.</p>"},{"location":"SA-Wiki/Filterbot/#basic-usage","title":"Basic usage","text":"<pre><code>import scratchattach as sa\nfrom scratchattach import HardFilter, SoftFilter, SpamFilter\n\nsession = sa.login(\"username\", \"password\")\nfilterbot = session.connect_filterbot(log_deletions=True)\n\n@filterbot.event\ndef on_ready():\n    print(\"Filterbot ready\")\n\nfilterbot.add_f4f_filter() # Adds pre-made f4f filter profile\nfilterbot.add_ads_filter() # Adds pre-made advertising filter profile\nfilterbot.add_spam_filter() # Adds pre-made spam filter profile\n\nfilterbot.start()\n</code></pre>"},{"location":"SA-Wiki/Filterbot/#advanced","title":"Advanced","text":"<p>It's possible to define your own filters. When you receive a comment that violates one of your filters, it will automatically be deleted.</p> <p>There are three types of filters:</p>"},{"location":"SA-Wiki/Filterbot/#hardfilter","title":"HardFilter","text":"<p>If a comment violates one of the hard filters, it will always be deleted (no matter the results of the other filters).</p> <p>How to create and add a hard filter:</p> <pre><code>hard_filter = HardFilter(\"filter name\", equals=None, contains=None, author_name=None, project_id=None, profile=None, case_sensitive=False)\nfilterbot.add_filter(hard_filter)\n</code></pre> <p>Keyword arguments of the HardFilter constructor:</p> <p>Generally: Arguments are None by default. Setting an argument to None basically means that this filter criterium is disabled. The filter criteriums are AND-connected, meaning the filter will only be violated if all of the conditions (defined by the arguments) are met. For OR-connections, just create multiple filters.</p> <ul> <li>equals: The filter is violated if the comment content equals the string this field is set to</li> <li>contains: The filter is violated if the comment content contains the string this field is set to. Tip: Set <code>contains</code> to \"\" to filter all comments (because <code>string contains \"\"</code> is always True)</li> <li>author_name: The filter is violated if the comment is from a specific author</li> <li>project_id: The filter is violated if the comment was posted on a specific project</li> <li>profile: The filter is violated if the comment was posted on a specific profile</li> </ul> <p>Through the <code>case_sensitive</code> argument, you can specify whether checking the <code>equals</code> and <code>contains</code> criteria should be case-sensitive or not.</p>"},{"location":"SA-Wiki/Filterbot/#softfilter","title":"SoftFilter","text":"<p>If a comment violates a spam filter, the score value of the soft filter will be added to the comment's total violation score (initially 0.0). If this total score is at least 1.0 after all filters were applied, the comment will be deleted.</p> <p>How to create and add a soft filter:</p> <pre><code>soft_filter = SoftFilter(\"filter name\", score_value, equals=None, contains=None, author_name=None, project_id=None, profile=None, case_sensitive=False)\nfilterbot.add_filter(soft_filter)\n</code></pre>"},{"location":"SA-Wiki/Filterbot/#spamfilter","title":"SpamFilter","text":"<p>Spam filters are hard filters that only delete a comment if it is the 2nd matching comment that was posted in less than 5 minutes.</p> <p>How to create and add a spam filter:</p> <pre><code>spam_filter = SpamFilter(\"filter name\", equals=None, contains=None, author_name=None, project_id=None, profile=None, case_sensitive=False)\nfilterbot.add_filter(spam_filter)\n</code></pre>"},{"location":"SA-Wiki/Get-your-session-id/","title":"Get your session id","text":"<p>Warning: DO NOT share your session id, as it can allow hackers to login to your account without your password!</p> <p>For Safari users: See below</p>"},{"location":"SA-Wiki/Get-your-session-id/#for-chrome-firefox-edge-and-most-browsers","title":"For Chrome, Firefox, Edge, and most browsers","text":"<ol> <li>Open scratch.mit.edu in your browser and login to your scratch account</li> <li>Open the developer tools by pressing fn+F12 or F12.</li> <li>Go to the \"Application\" tab (in Firefox &amp; DuckDuckGo the \"Storage\" tab), then go to \"Cookies\" &gt; \"https://scratch.mit.edu\"</li> <li>Then find a cookie named  <code>scratchsessionsid</code>. The value of this cookie is your Scratch session id </li> </ol> <p>For Firefox/DuckDuckGo: </p>"},{"location":"SA-Wiki/Get-your-session-id/#for-safari","title":"For Safari:","text":"<ol> <li>Enable developer features</li> <li>Open scratch.mit.edu in your browser and login to your scratch account</li> <li>Open the developer tools using <code>\u2318 + \u2325 + I.</code></li> <li>Go to the \"Storage\" tab, then go to \"Cookies\" &gt; \"https://scratch.mit.edu\"</li> <li>Then find a cookie named  <code>scratchsessionsid</code>. The value of this cookie is your Scratch session id </li> </ol> <p>There's an alternative way to do it:</p> <p>As of July 2024 this only works on Microsoft Edge</p> <ol> <li>Open scratch.mit.edu in your browser and login to your scratch account</li> <li>Click the \ud83d\udd12 icon in the URL bar, then click \"Cookies\"</li> <li>Then find a cookie called <code>scratchsessionsid</code> (in the \"scratch.mit.edu\" \u00bb \"Cookies\" folder). The content of this cookie is your Scratch session id</li> </ol> <p></p>"},{"location":"SA-Wiki/Hosting/","title":"Hosting","text":"<p>If you want your Python code to run 24/7, you'll either need to use a hosting service or host locally. This page lists different hosting services. If you know a hosting option that isn't listed here, open an issue to ask for it to be added.</p> <p>We have a YouTube video that also walks through how to use some of these services.</p>"},{"location":"SA-Wiki/Hosting/#free-services","title":"Free services","text":""},{"location":"SA-Wiki/Hosting/#1-sillydev","title":"1. sillydev","text":"<p>Link: panel.sillydev.co.uk</p> <p>How to use: Video tutorial</p> <p>Best if you need lots of scripts running 24/7.</p>"},{"location":"SA-Wiki/Hosting/#2-back4app","title":"2. Back4app","text":"<p>Link: back4app.com</p> <p>A platform offering Container as a service (CaaS). This allows you to use any coding language. - On free plan, you get 600 free deploy hours per month. This means your app will run for 25 days per month. - Ease of setup: 6/10</p> <p>How to use:</p> <p>To get started, fork this template on GitHub: https://github.com/templates-back4app/containers-python-flask-sample/blob/main/app.py</p> <p>Edit your Python code so that the lines executing your backend server (like <code>client.run()</code> or <code>events.start()</code>) are inside a <code>def run():</code> function.</p> <p>Then, add a <code>backend_code.py</code> file and paste your Python code to it. Go to the <code>app.py</code> file and add this code to line 2:</p> <pre><code>from threading import Thread\nimport backend_code\nThread(target=backend_code.run).start()\n</code></pre> <p>After you did that, go to back4app, create a new app and select \"Container\". Back4app will ask you to log in with GitHub. Select the repository fork you created before. If everything was done correctly, your code should be executed as soon as the container has started.</p> <p>Warning:</p> <p>Your app will only stay awake if you ping it using a pinger like uptimerobot.com.</p>"},{"location":"SA-Wiki/Hosting/#paid-services","title":"Paid services","text":""},{"location":"SA-Wiki/Hosting/#1-replit","title":"1. Replit","text":"<p>Link: replit.com</p> <p>Offers different tiers for hosting Python code. Very easy to set up. However, replit's pricing has skyrocketed over the last two years and is now pretty expensive. </p>"},{"location":"SA-Wiki/Hosting/#2-ionos-vps","title":"2. IONOS VPS","text":"<p>Link: ionos.com/servers/vps</p> <p>Offers cheap VPS (Virtual private servers) for hosting any kind of code. The lowest tier offered is enough for hosting scratchattach backends. However, a VPS is way harder to set up than other hosting options.</p> <p>Not sponsered. The <code>Easy of use</code> rating takes factors like the time required to set up into account, but isn't purely objective.</p>"},{"location":"SA-Wiki/Hosting/#more","title":"More","text":"<p>https://dash.huguitisnodes.host/register Video timestamp: 0:04</p> <p>best for running 1-2 scripts, no renewal required!</p> <p>https://bot-hosting.net/ Video timestamp: 3:47</p> <p>Second best for running one or two scripts for a long time - requires you to earn credits. You can earn enough credits in one day to run your server for a week.</p> <p>https://panel.sillydev.co.uk/ Video timestamp: 7:06</p> <p>Best if you need lots of scripts running 24/7</p> <p>https://www.hidencloud.com/ Video timestamp: 9:37</p> <p>Lets you run one script and requires renewal once a week.</p> <p>https://botcore.org/ Video timestamp: 14:29</p> <p>Similar to sillydev, but required frequent renewals and server resources are expensive</p> <p>https://skycastle.us/</p>"},{"location":"SA-Wiki/Migrating-to-v2/","title":"Migrating to v2","text":"<p>Scratchattach v2 is not backwards compatible. But upgrading is worth it, because it comes with many new features.</p> <p>This page lists the main non-backwards-compatible changes to make it easier for you to upgrade. If you're running into unexpected errors, check the documentation to find out how the specific feature works in scratchattach v2.</p> <ol> <li>Generally, <code>scratchattach</code> is now imported as / referenced as <code>sa</code> (no longer as <code>scratch3</code>) in the docs.</li> <li><code>session = scratch3.Session(\"session_id\")</code> was changed to <code>session = sa.login_by_id(\"session_id\")</code></li> <li><code>events = scratch3.CloudEvents(\"project_id\")</code> was changed to <code>events = sa.get_cloud(\"project_id\").events()</code></li> <li><code>client = scratch3.CloudRequests(conn)</code> was changed to <code>client = session.connect_cloud(\"project_id\").requests()</code></li> <li> <p><code>value = scratch3.get_var(\"project_id\", \"variable\")</code> was changed to </p><pre><code>cloud = sa.get_cloud(\"project_id\") # This function is ran once\nvalue = cloud.get_var(\"variable\") # This function can safely be called in a loop without spamming an API\n</code></pre> The same applies to getting TurboWarp cloud variables.<p></p> </li> <li> <p>All comments are now represented by <code>sa.Comment</code> objects</p> </li> <li>All activites and messages are now represented by <code>sa.Activity</code> objects</li> <li>Projects and studios are now always represented by <code>sa.Project</code> and <code>sa.Studio</code> objects, never as dicts</li> <li>project.get_comment was changed to project.comment_by_id</li> <li>Generally, many functions that used to start with \".get_\" had the \"get_\" removed from their names.</li> <li>If an attribute refers to a username, it is now always \".username\" and not \".user\"</li> <li><code>CloudConnection</code> and <code>TwCloudConnection</code> don't exist anymore. Instead, there are now <code>Cloud</code> and <code>TwCloud</code> objects that not only handle setting cloud variables, but also have built in functions for getting variables very frequently without spamming the API (new CloudRecorder infrastracture).</li> <li><code>TwCloudEvents</code> and <code>WsCloudEvents</code> were merged into <code>CloudEvents</code>. The formerly called <code>CloudEvents</code> are now <code>CloudLogEvents</code></li> <li><code>TwCloudRequests</code> and <code>CloudRequests</code> were merged into <code>CloudRequests</code></li> <li>All events are now always ran in threads by default. You can disable this using <code>@events.event(thread=False)</code></li> <li>Cloud Request Events don't use the <code>id</code> attribute anymore. Instead, they use the <code>request_id</code> attribute.</li> </ol>"},{"location":"SA-Wiki/Project-parsing-editing/","title":"Project parsing editing","text":"<p>Scratchattach provides a submodule <code>editor</code> for project parsing/editing. It is useful for extracting data from projects, or performing repetitive operations.</p> <p>Note</p> <p>Scratchattach.editor is work-in-progress. If there is a feature missing or a strange bug, please add an issue!</p>"},{"location":"SA-Wiki/Project-parsing-editing/#basic-usage","title":"Basic usage","text":""},{"location":"SA-Wiki/Project-parsing-editing/#import-scratchattacheditor","title":"import scratchattach.editor:","text":"<pre><code>from scratchattach import editor\n</code></pre>"},{"location":"SA-Wiki/Project-parsing-editing/#load-a-project","title":"Load a project","text":"<pre><code># from a sb3 filepath:\nproj = editor.Project.from_sb3(\"test proj.sb3\")\n\n# from a binary file\nwith open(\"test proj.sb3\", \"rb\") as f: \n    proj = editor.Project.from_sb3(f)\n\n# from a bytes\nwith open(\"test proj.sb3\", \"rb\") as f:\n    sb3_bytes = f.read()\nproj = editor.Project.from_sb3(sb3_bytes)\n\n# from a project id\nproj = editor.Project.from_id(104)  # Project&lt;name=Weekend, meta=Meta&lt;3.0.0 : 0.1.0 : scratchattach.editor by https://scratch.mit.edu/users/timmccool/&gt;&gt;\n</code></pre>"},{"location":"SA-Wiki/Project-parsing-editing/#view-project-attributes","title":"View project attributes","text":"<pre><code># print project name, if applicable (inferred from project title, or file name)\nprint(proj.name)  # test proj\n\n# print project assets (costumes and sounds in all sprites)\nfor asset in proj.assets:\n    print(asset)\n\n# View turbowarp configuration\nprint(proj.tw_config)\n\n# Get comment instance storing twconfig\nprint(proj.tw_config_comment)\n\n# Get a variable, list or broadcast (including for-this-sprite-only vars)\nprint(proj.find_vlb(\"my variable\"))\n\n# Get all variables/lists/broadcasts with name\nprint(proj.find_vlb(\"my variable\", multiple=True))  # if you have a variable and list called 'my variable' this will return a list including both\n\n# print project monitors (variable/list displays)\nprint(proj.monitors)\n\n# print project metadata\n# prints in format {semver} : {vm} : {agent} : {Optional[Platform metadata (used by turbowarp)]}\nprint(proj.meta)  # Meta&lt;3.0.0 : 0.1.0 : scratchattach.editor by https://scratch.mit.edu/users/timmccool/: PlatformMeta(name='TurboWarp', url='https://turbowarp.org/')&gt;\n\n# view extensions that are used by the project (this may not work with old scratch projects)\nprint(proj.extensions)  # [Extension(code='pen', name='Pen Extension')]\n\n# SUBJECT TO CHANGE: Add a monitor to the project\nvlb = proj.find_vlb('var')\nm = editor.Monitor(vlb, visible=True, params={\n    \"VARIABLE\": vlb.name\n})\n\nproj.add_monitor(m)\n</code></pre> <p>Warning</p> <p>Loading scripts from the backpack requires a special function: editor.load_script_from_backpack, because the backpack uses a  slightly different block syntax</p>"},{"location":"SA-Wiki/Structure-of-the-library/","title":"Base classes","text":""},{"location":"SA-Wiki/Structure-of-the-library/#base-classes","title":"Base classes","text":"<p>Scratchattach consists out of three base classes: <code>BaseEventHandler</code>, <code>BaseSiteComponent</code> and <code>BaseCloud</code>. All classes are grouped in folders based on which base class they are built upon.</p> <p>Note</p> <p>The scratchattach.editor module uses its own base classes and is structured separately to the rest of scratchattach. This is possibly subject to change.</p>"},{"location":"SA-Wiki/Structure-of-the-library/#baseeventhandler","title":"BaseEventHandler:","text":"<p><code>CloudEvents</code> is built upon / inheriting from <code>BaseEventHandler</code>, <code>CloudRequests</code> is built upon <code>CloudEvents</code>, and <code>CloudStorage</code> is built upon <code>CloudRequests</code>. Also <code>MessageEvents</code> is built upon <code>BaseEventHandler</code>, and <code>Filterbot</code> is build upon <code>MessageEvents</code>. This reduces boilerplate code a lot compared to v1.</p>"},{"location":"SA-Wiki/Structure-of-the-library/#basesitecomponent","title":"BaseSiteComponent:","text":"<p>All site components (Session, User, Project, Activity, CloudActivity etc.) inherit from this class. They all have a <code>._session</code> atribute saving the Session connected with the object (or <code>None</code> if there is no session connected) BaseSiteComponent provides an update method that calls the corresponding JSON API to get updated information about the represented site component and then calls the _update_from_dictmethod, providing the API response as argument (This method is defined as abstract method in the <code>BaseSiteComponent</code> class. In the classes inheriting from <code>BaseSiteComponent</code>, it is overridden with a class-specific method for parsing the API response.)</p> <p>Objects of a class <code>C</code> inheriting from <code>BaseSiteComponent</code> are always initialized this way (<code>object_id</code> is the ID that identificates the object in the API (like the project or studio id) and session is the <code>sa.Session</code> object that should be connected with the object):</p> <pre><code>object = C(id=object_id, _session=session)\nobject.update()\n</code></pre> <p>To reduce boilerplate code, this generalized process is implemented in the <code>_get_object</code> function in util _&gt; ._commons.py. In commons.py, there's also a generalized method for parsing a list with dicts representing users, studios etc. to a list of objects inheriting these users, studios etc..</p>"},{"location":"SA-Wiki/Structure-of-the-library/#basecloud","title":"BaseCloud:","text":"<p>A generalized base class for representing the cloud of any cloud variable server. ScratchCloud and TwCloud inherit from this class and are optimized for using Scratch / TurboWarp cloud variables. There's also CustomCloud (also inheriting from BaseCloud) which allows setting all attributes yourself in the constructor. If you need even more customizability (like defining your own set_var function etc) you can create your own class inheriting from BaseCloud (there's more info about this in the docstring of BaseCloud).</p>"},{"location":"SA-Wiki/Structure-of-the-library/#scratchattachget_xyz-and-sessionconnect_xyz","title":"scratchattach.get_xyz and Session.connect_xyz","text":"<p>In v2.0, \"get_\" always means that there's no Session connected to the returned object and that the returned object therefore can't be used for performing operations (like .love(), .follow()) that require authentication. \"connect_\" always means that the Session will be connected to the returned object / saved in the object's ._session attribute.</p> <p>This is used consistently throughout the whole library: scratchattach.get_cloud vs. Session.connect_cloud, scratchattach.get_user vs. Session.connect_user, scratchattach.get_project vs. Session.connect_project</p>"}]}